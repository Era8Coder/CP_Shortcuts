#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

typedef long long ll;

vector<ll> generate_palindromes(ll n) {
    vector<ll> palindromes;

    // even length palindromes
    for (int i = 1; ; i++) {
        string left = to_string(i);
        string right = left;
        reverse(right.begin(), right.end());
        string full = left + right;
        ll num = stoll(full);  // correct type for large numbers
        if (num > n) break;
        palindromes.push_back(num);
    }

    // odd length palindromes
    for (int i = 1; ; i++) {
        string left = to_string(i);
        string right = left;
        right.pop_back();
        reverse(right.begin(), right.end());
        string full = left + right;
        ll num = stoll(full);  // correct type for large numbers
        if (num > n) break;
        palindromes.push_back(num);
    }

    return palindromes;
}

string convert(ll a, ll n) {
    if (n == 0) return "0";
    string ans = "";
    while (n != 0) {
        ans += to_string(n % a);
        n = n / a;
    }
    reverse(ans.begin(), ans.end());  // fix: digits should be in correct order
    return ans;
}

bool is_palindrome(const string& str) {
    int i = 0, j = str.size() - 1;
    while (i <= j) {
        if (str[i] != str[j]) return false;
        i++;
        j--;
    }
    return true;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int a;
    ll n;
    cin >> a >> n;

    vector<ll> vec = generate_palindromes(n);
    ll ans = 0;

    for (ll val : vec) {
        string s = convert(a, val);
        if (is_palindrome(s)) {
            ans += val;
        }
    }

    cout << ans << '\n';
    return 0;
}
